/ {
	aliases {
		grbluart = &usart2;
		grblpwm =  &red_pwm_led;
	};

	pwmleds {
		compatible = "pwm-leds";

		red_pwm_led: red_pwm_led {
			pwms = <&pwm1 1 4 PWM_POLARITY_NORMAL>;
		};
	};

	motor1_pins {
		compatible = "gpio-leds";

		dir {
			gpios = <&gpioa 0 GPIO_ACTIVE_HIGH>;
			label = "Motor driver direction pin";
		};

		step {
			gpios = <&gpioa 1 GPIO_ACTIVE_HIGH>;
			label = "Motor driver step pin";
		};

		enable {
			gpios = <&gpioa 4 GPIO_ACTIVE_LOW>;
			label = "Enable the motor driver";
		};

		nss {
			gpios = <&gpiob 0 GPIO_ACTIVE_HIGH>;
			label = "SPI chip select";
		};
	};

	motor2_pins {
		compatible = "gpio-leds";

		dir {
			gpios = <&gpioc 1 GPIO_ACTIVE_HIGH>;
			label = "Motor 2 driver direction pin";
		};

		step {
			gpios = <&gpioc 0 GPIO_ACTIVE_HIGH>;
			label = "Motor 2 driver step pin";
		};

		enable {
			gpios = <&gpiod 3 GPIO_ACTIVE_LOW>;
			label = "Enable the motor 2 driver";
		};

		nss {
			gpios = <&gpiog 2 GPIO_ACTIVE_HIGH>;
			label = "SPI chip select for motor 2";
		};
	};

	motorz_pins {
		compatible = "gpio-leds";

		dir {
			gpios = <&gpioe 10 GPIO_ACTIVE_HIGH>;
			label = "Motor 3 driver direction pin";
		};

		step {
			gpios = <&gpioe 12 GPIO_ACTIVE_HIGH>;
			label = "Motor 3 driver step pin";
		};

		enable {
			gpios = <&gpioe 14 GPIO_ACTIVE_LOW>;
			label = "Enable the motor 3 driver";
		};

		nss {
			gpios = <&gpioe 15 GPIO_ACTIVE_HIGH>;
			label = "SPI chip select for motor 3";
		};
	};

	edge_switch_pins {
		compatible = "gpio-keys";

		left {// Something wrong with this one
			gpios = <&gpioe 2 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
			label = "Edge switch on the left side (touching the west attachment)";
		};

		right {
			gpios = <&gpioe 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
			label = "Edge switch on the right side (touching the east attachment)";
		};

		top {
			gpios = <&gpioe 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
			label = "Edge switch on the top (touching the north attachment)";
		};

		bottom {
			gpios = <&gpiof 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
			label = "Edge switch on the bottom side (touching the pen holder)";
		};

		motor1_stall {
			gpios = <&gpiof 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
			label = "Motor 1 stall diagnostic output. Detects when the motor stalls.";
		};

		motor2_stall {
			gpios = <&gpiog 1 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>;
			label = "Motor 2 stall diagnostic output. Detects when the motor stalls.";
		};
	};
};

/*
&spi2 {
	status = "okay";
	pinctrl-0 = <&spi2_sck_pb10 &spi2_mosi_pc3 &spi2_miso_pc2 &spi2_nss_pb12>;

	sdhc0: sdhc@0 {
		compatible = "zephyr,mmc-spi-slot";
		reg = <0>;
		status = "okay";
		label = "SDHC0";
		spi-max-frequency = <500000>;
	};
};
 */

&timers1 {
	status = "okay";

	pwm1: pwm {
		status = "okay";
		st,prescaler = <10>;
	};
};

/*
 * What does the "<&dma1 7 2 0x440 0x3>" mean? It's a cell (array of 32bit integers) whose fields mean:
 *
 * &dma1: reference to dma1
 * 7: channel number 7
 * 2: request number 2
 * 0x440:
 * (bit 10 is set) : increment memory addres after DMA request
 * (bits 6-7 == 0b01) : MEM to PERIPH
 * 0x03: not used. Dummy value.
 *
 * Note: even with improper DMA configuration (to some extent: eg. &dma2 instead of &dma1 or wrong channel), the UART2 still worked.
 * I suspect it felt back to some default polling mode, or even more probably, the initialization failed, but I used the same usart
 * which is used for logging, so it was already initialized.
 */
&usart2 {
	dmas = <&dma1 7 2 0x440 0x3>,
		   <&dma1 6 2 0x480 0x3>;
	dma-names = "tx", "rx";
};

&dma1 {
	status = "okay";
};

